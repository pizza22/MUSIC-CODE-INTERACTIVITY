/* Assignment #1:Add to the program variables named
	r1, r2 for the rates of mod1 and mod2
	g 		for the rate of the main glissando
	delay	for the duration of the delay
	decay	for how long an echo takes to fade away

All you need to do is to add the following line at the top of the synthesis function:

var r1,r2,g,delay,decay;

Assign each variable the value used in the original program ((i.e., 8, 7.23, 0.4, 0,2, 4)
Then make four copies of the patch and change those values to create different sounds

*/

(
{
	var k, f, a, mod1, mod2;
	mod1 = LFSaw.kr(8);
	mod1 = mod1.range( 78, 84);

	mod2 = LFSaw.kr(7.23);					// define the second modulator
	mod2 = mod2.range( 78, 84);

	k = LFSaw.kr(0.4) * 24 + [mod1, mod2];	// use the second modulator
	f = k.midicps;
	a = SinOsc.ar(f) * 0.04;
	CombN.ar(a, 0.2, 0.2, 4)
}.play
)

/*Assignment #2:
Select your favorite variant and use the Env class to create an envelope so that it
plays for a fixed duration and falls silent.  (You will play this in class.)
Below is an example you can draw upon.

*/

(
{ var levels, times, doneAction, env, a;
	// THIS IS JUST THE TEST SOUND
	a = PinkNoise.ar;
	a = RLPF.ar(a, [500, 600], 0.01).softclip * 0.1;

	// HERE IS THE ENVELOPE
	doneAction = 2;				// when the envelope finishes, it will dispose of the synth
	levels = [0,1,1,0];			// envelope will begin at 0 go to 1, stay there and then decay
	times = [2, 3, 1];			// 0 to 1: 20 seconds, 1 to 1: 3 seconds, 1 to 0: 0.1 seconds
	env = Env(levels, times);	// define the envelope
	env = env.kr(doneAction);	// make it run as a UGen
	env = env.lincurve(0, 1, 0,4, 3); // read the SimpleNumber helpfile discussion of lincurve

	// applying the envelope to the sound
	a = env * a;
}.play;
)

